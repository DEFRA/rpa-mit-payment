pool:
  vmImage: ubuntu-latest

variables:
  system.debug: true
  buildConfiguration: 'Release'
  ${{ if eq(variables['Build.Reason'], 'IndividualCI') }}: 
    additionalSonarParams: 'sonar.branch.name=$(Build.SourceBranchName)'
  ${{ else }}: 
    additionalSonarParams: ''

trigger:
- main

steps:
- task: SonarCloudPrepare@1
  displayName: 'Prepare analysis on SonarCloud'
  inputs:
    SonarCloud: 'SonarCloud EST.MIT.Payment'
    organization: 'defra'
    scannerMode: 'MSBuild'
    projectKey: 'defra_est-mit-payment'
    projectName: 'EST.MIT.Payment'
    extraProperties: |
      sonar.exclusions=**/obj/**,**/*.dll,**/*.cshtml,**/*.css,**/*.js,**/*.json,**/wwwroot/**,**/test/**,**/Program.cs,**/EST.Payment.Function.Tests/**
      sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)/**/coverage.opencover.xml
      sonar.cs.vstest.reportsPaths=$(Agent.TempDirectory)/*.trx
      $(additionalSonarParams)    

- task: DotNetCoreCLI@2
  displayName: 'Lint code with dotnet format'
  inputs: 
    command: 'custom'
    custom: format
    arguments: 'whitespace --verbosity n --verify-no-changes'

- task: DotNetCoreCLI@2
  displayName: Build project
  inputs: 
   command: build
   projects: '**/*.csproj'
   arguments: '--configuration $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: 'Run Tests'
  inputs:
    command: test
    projects: '**/*Test/*.csproj'
    arguments: '--configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=opencover --logger trx'

- task: SonarCloudAnalyze@1
  displayName: 'Run Sonar Analysis'

- task: SonarCloudPublish@1
  displayName: 'Publish Sonar Results'
  continueOnError: true
  inputs:
    pollingTimeoutSec: '300'

- task: DotNetCoreCLI@2
  condition: eq(variables['Build.SourceBranchName'], 'main')
  displayName: 'Build Website Artifacts'
  inputs:
    command: publish
    publishWebProjects: false
    projects: '**/EST.MIT.Payment.*.csproj'
    arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
    zipAfterPublish: true

- task: PublishBuildArtifacts@1
  condition: eq(variables['Build.SourceBranchName'], 'main')
  displayName: 'Publish Website Artifacts'
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)'
    artifactName: 'EST.MIT.Payment'
